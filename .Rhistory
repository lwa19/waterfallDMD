# Studentized Residuals:
X = t(rbind(Age, Sex, R_E, Comorbidity1, Education))
hii = diag(X %*% solve(t(X) %*% (X)) %*% t(X))
int.res = residuals / fit.sigma / (1-hii)^0.5
print(paste("Proportion correct:", sum(int.res - fit.int < 10^-2)/612))
fit.sigma
# Externally Studentized Residuals:
sigma.loo = rep(NA, 612)
for (i in 1:612){
sigma.loo[i] = sqrt(sum(residuals[-i]^2)/(612-6))
}
ext.res = residuals / sigma.loo / (1-hii)^0.5
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-2)/612))
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-3)/612))
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-2)/612))
# Residuals:
residuals = Fatalism - fit$fitted.values
print(paste("Proportion correct:", sum(residuals - fit.res < 10^-6)/612))
# Standardized Residuals:
fit.sigma = sqrt(sum(fit.res^2)/(612-6))
std.res = residuals / fit.sigma
print(paste("Proportion correct:", sum(std.res - fit.std < 10^-6)/612))
# Studentized Residuals:
X = t(rbind(Age, Sex, R_E, Comorbidity1, Education))
hii = diag(X %*% solve(t(X) %*% (X)) %*% t(X))
int.res = residuals / fit.sigma / (1-hii)^0.5
print(paste("Proportion correct:", sum(int.res - fit.int < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# Externally Studentized Residuals:
sigma.loo = rep(NA, 612)
for (i in 1:612){
sigma.loo[i] = sqrt(sum(residuals[-i]^2)/(612-6))
}
ext.res = residuals / sigma.loo / (1-hii)^0.5
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# Residuals:
residuals = Fatalism - fit$fitted.values
print(paste("Proportion correct:", sum(residuals - fit.res < 10^-6)/612))
# Standardized Residuals:
fit.sigma = sqrt(sum(fit.res^2)/(612-6))
std.res = residuals / fit.sigma
print(paste("Proportion correct:", sum(std.res - fit.std < 10^-6)/612))
# Studentized Residuals:
X = t(rbind(Age, Sex, R_E, Comorbidity1, Education))
hii = diag(X %*% solve(t(X) %*% (X)) %*% t(X))
int.res = residuals / fit.sigma / (1-hii)^0.5
print(paste("Proportion correct:", sum(int.res - fit.int < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# Externally Studentized Residuals:
sigma.loo = rep(NA, 612)
for (i in 1:612){
sigma.loo[i] = sqrt(sum(residuals[-i]^2)/(612-6))
}
ext.res = residuals / sigma.loo / (1-hii)^0.5
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# calculate differences:
summary(residuals - std.res)
summary(residuals - int.res)
summary(residuals - ext.res)
summary(std.res - int.res)
summary(std.res - ext.res)
summary(int.res - ext.res)
X = cbind(rep(1, 612), X)
class(X)
# Residuals:
residuals = Fatalism - fit$fitted.values
print(paste("Proportion correct:", sum(residuals - fit.res < 10^-6)/612))
# Standardized Residuals:
fit.sigma = sqrt(sum(fit.res^2)/(612-6))
std.res = residuals / fit.sigma
print(paste("Proportion correct:", sum(std.res - fit.std < 10^-6)/612))
# Studentized Residuals:
X = t(rbind(Age, Sex, R_E, Comorbidity1, Education))
X = cbind(rep(1, 612), X)
hii = diag(X %*% solve(t(X) %*% (X)) %*% t(X))
int.res = residuals / fit.sigma / (1-hii)^0.5
print(paste("Proportion correct:", sum(int.res - fit.int < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# Externally Studentized Residuals:
sigma.loo = rep(NA, 612)
for (i in 1:612){
sigma.loo[i] = sqrt(sum(residuals[-i]^2)/(612-6))
}
ext.res = residuals / sigma.loo / (1-hii)^0.5
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# calculate differences:
summary(residuals - std.res)
summary(residuals - int.res)
summary(residuals - ext.res)
summary(std.res - int.res)
summary(std.res - ext.res)
summary(int.res - ext.res)
X[1:5, 1:5]
head(X)
# Residuals:
residuals = Fatalism - fit$fitted.values
print(paste("Proportion correct:", sum(residuals - fit.res < 10^-6)/612))
# Standardized Residuals:
fit.sigma = sqrt(sum(fit.res^2)/(612-6))
std.res = residuals / fit.sigma
print(paste("Proportion correct:", sum(std.res - fit.std < 10^-6)/612))
# Studentized Residuals:
X = t(rbind(Age, Sex, R_E, Comorbidity1, Education))
X = cbind(rep(1, 612), X)
hii = diag(X %*% solve(t(X) %*% (X)) %*% t(X))
int.res = residuals / fit.sigma / (1-hii)^0.5
print(paste("Proportion correct:", sum(int.res - fit.int < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# Externally Studentized Residuals:
sigma.loo = rep(NA, 612)
for (i in 1:612){
sigma.loo[i] = sqrt(sum(residuals[-i]^2)/(612-6))
}
ext.res = residuals / sigma.loo / (1-hii)^0.5
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# calculate differences:
summary(residuals - std.res)
summary(residuals - int.res)
summary(residuals - ext.res)
summary(std.res - int.res)
summary(std.res - ext.res)
summary(int.res - ext.res)
# Residuals:
residuals = Fatalism - fit$fitted.values
print(paste("Proportion correct:", sum(residuals - fit.res < 10^-6)/612))
# Standardized Residuals:
fit.sigma = sqrt(sum(fit.res^2)/(612-6))
std.res = residuals / fit.sigma
print(paste("Proportion correct:", sum(std.res - fit.std < 10^-6)/612))
# Studentized Residuals:
X = t(rbind(Age, Sex, R_E, Comorbidity1, Education))
X = cbind(rep(1, 612), X)
hii = diag(X %*% solve(t(X) %*% (X)) %*% t(X))
int.res = residuals / fit.sigma / (1-hii)^0.5
print(paste("Proportion correct:", sum(int.res - fit.int < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# Externally Studentized Residuals:
sigma.loo = rep(NA, 612)
for (i in 1:612){
sigma.loo[i] = sqrt(sum(residuals[-i]^2)/(612-6-1))
}
ext.res = residuals / sigma.loo / (1-hii)^0.5
print(paste("Proportion correct:", sum(ext.res - fit.ext < 10^-2)/612))
# Note here that I loosened the convergence criteria because of R rounding errors
# calculate differences:
summary(residuals - std.res)
summary(residuals - int.res)
summary(residuals - ext.res)
summary(std.res - int.res)
summary(std.res - ext.res)
summary(int.res - ext.res)
install.packages("NHANES")
library(NHANES)
str(NHanes)
str(NHANES)
library(NHANES)
library(NHANES)
str(NHANES)
attach(NHANES)
class(NHANES)
attach(NHANES)
library(NHANES)
str(NHANES)
attach(NHANES)
fit1 = lm(SleepHrsNight ~ Age + Gender + Race1 + BMI + SleepTrouble + HealthGen + Diabetes
+ Depressed + CompHrsDay + AlcoholDay + PhysActiveDays + TVHrsDay)
summary(fit1)
fit1 = lm(SleepHrsNight ~ Age + Gender + Race1 + BMI + SleepTrouble + HealthGen + Diabetes
+ Depressed + CompHrsDay + AlcoholDay + PhysActiveDays + TVHrsDay + SmokeNow)
summary(fit1)
dim(NHANES)
head(NHANES)
data20 = subset(NHANES, Age >= 20)
data20 <- data20[match(unique(data20$ID),data20$ID),]
vars = c("Age","Gender", "Race1", "BMI", "SleepTrouble", "HealthGen",
"Diabetes", "Depressed", "CompHrsDay", "AlcoholDay",
"PhysActiveDays", "TVHrsDay", "SleepHrsNight")
na.per = rep(NA, 13)
for (i in vars){
na.per[i] = sum(is.na(data20[[vars]]))
}
data20[['Age']]
na.per = rep(NA, 13)
for (i in vars){
na.per[i] = sum(is.na(data20[[i]]))
}
na.per
na.per = rep(NA, 13)
for (i in vars){
na.per[i] = sum(is.na(data20[[i]]))
}
sum(is.na(data20[['Age']]))
for (i in vars){
na.per[i] = sum(is.na(data20[[i]]))
}
na.per = rep(NA, 13)
for (i in 1:13){
na.per[i] = sum(is.na(data20[[var[i]]]))
}
na.per = rep(NA, 13)
for (i in 1:13){
na.per[i] = sum(is.na(data20[[vars(i)]]))
}
vars = c("Age","Gender", "Race1", "BMI", "SleepTrouble", "HealthGen",
"Diabetes", "Depressed", "CompHrsDay", "AlcoholDay",
"PhysActiveDays", "TVHrsDay", "SleepHrsNight")
na.per = rep(NA, 13)
for (i in 1:13){
}
data20 = subset(NHANES, Age >= 20)
data20 <- data20[match(unique(data20$ID),data20$ID),]
vars = c("Age","Gender", "Race1", "BMI", "SleepTrouble", "HealthGen",
"Diabetes", "Depressed", "CompHrsDay", "AlcoholDay",
"PhysActiveDays", "TVHrsDay", "SleepHrsNight")
na.per = rep(NA, 13)
for (i in 1:13){
na.per[i] = sum(is.na(data20[[vars[i]]]))
}
na.per
vars
na.per = rep(NA, 13)
for (i in 1:13){
print(var[i])
na.per[i] = sum(is.na(data20[[vars[i]]]))
print(na.per[i])
}
na.per = rep(NA, 13)
for (i in 1:13){
print(vars[i])
na.per[i] = sum(is.na(data20[[vars[i]]]))
print(na.per[i])
}
summary(data.tv$Age)
data.tv = subset(NHANES, !is.na(TVHrsDay))
summary(data.tv$Age)
dim(data.tv)
sum(data.tv$Age >= 16)
sum(data.tv$Age >= 20)
data.unique <- NHANES[match(unique(NHANES$ID),NHANES$ID),]
dim(data.unique)
vars = c("Age","Gender", "Race1", "BMI", "SleepTrouble", "HealthGen",
"Diabetes", "Depressed", "CompHrsDay", "AlcoholDay",
"PhysActiveDays", "TVHrsDay", "SleepHrsNight", "PhysActive")
na.per = rep(NA, 14)
for (i in 1:14){
print(vars[i])
na.per[i] = sum(is.na(data20[[vars[i]]]))
print(na.per[i])
}
summary(PhysActive)
system('echo $GITHUB_PAT')
system('echo $GITHUB_PAT')
key <- openssl::rsa_keygen()
pub_key <- travis:::get_public_key(key)
private_key <- travis:::encode_private_key(key)
private_key
detach("package:centrality", unload = TRUE)
library(devtools)
install_github("lwa19/centrality")
library(devtools)
install_github("lwa19/centrality", force = TRUE)
browseVignettes("centrality")
devtools::install_github("lwa19/centrality", build_vignettes = TRUE, force = TRUE)
browseVignettes()
browseVignettes(package="centrality")
knitr::opts_chunk$set(echo = TRUE)
nh = data.frame(NHANES::NHANES)
library("Hmisc")
library("dplyr")
library("tidyr")
library("sas7bdat")
library("corrplot")
library("gtsummary")
library("dplyr")
library("olsrr")
varinterst = c("Age","Gender","Race1","Depressed","Diabetes","BPSysAve", "BPDiaAve", "TotChol", "Testosterone", "RegularMarij", "Weight", "Height")
nh1 = nh[,varinterst]
nh1 <- nh1[ which(nh1$Age >=18 & nh1$Age <=59), ] #Due to Marijuana variable.
nh1 <- nh1 %>%
mutate(HypT = if_else(nh1$BPSysAve >= 130 | nh1$BPDiaAve >=80, 1, 0)) #Add hypertension variable
nh1 <- nh1 %>%
mutate(Sex = ifelse(nh1$Gender == "female", 1, 0)) #Recode Sex into binary where female=1, male=0
nh1 <- nh1 %>%
mutate(Diabete = ifelse(nh1$Diabetes == "No", 0, 1)) #Recode Diabetes into binary where No=0, Yes=1
nh1 <- nh1 %>%
mutate(RegMarij = ifelse(nh1$RegularMarij == "No", 0, 1)) #Recode Regular Marij into binary where No=0, Yes=1
nh1 <- nh1 %>%
mutate(Depress = ifelse(nh1$Depressed == "None", 0, 1)) #Recode Depressed into reports syptoms or does not have syptoms
nh1$Incomplete = complete.cases(nh1)
nh1$Race1 = as.factor(nh1$Race1) #Race as factor
#Creates Sex Specific Data Sets
drops = c("Sex")
nhF= nh1[ which(nh1$Sex == 1), ]
nhM = nh1[ which(nh1$Sex == 0), ]
nhF = nhF[,!(names(nhF) %in% drops)]
nhM = nhM[,!(names(nhM) %in% drops)]
nh1[,c("Age","Gender","Race1","Depressed","Diabetes","TotChol", "Testosterone", "RegularMarij", "Weight", "Height", "HypT", "Incomplete")] %>%
tbl_summary(by = Incomplete,
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"),
) %>%
add_n %>%
add_p(test = list(Age ~ "t.test",
Race1 ~ "chisq.test",
Depressed ~ "chisq.test",
Diabetes ~ "chisq.test",
HypT ~ "chisq.test",
TotChol ~ "t.test",
Testosterone ~ "t.test",
RegularMarij ~ "chisq.test",
Weight ~ "t.test",
Height ~ "t.test"),
test.args = all_tests("t.test") ~ list(var.equal = TRUE),## Important argument!
pvalue_fun = function(x) style_pvalue(x, digits = 2)) %>%
bold_p(t = 0.05) %>%
bold_labels
## Shiny app
nhF[,c("Age","Gender","Race1","Depressed","Diabetes","TotChol", "Testosterone", "RegularMarij", "Weight", "Height", "HypT", "Incomplete")] %>%
tbl_summary(by = Incomplete,
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"),
) %>%
add_n %>%
add_p(test = list(Age ~ "t.test",
Race1 ~ "chisq.test",
Depressed ~ "chisq.test",
Diabetes ~ "chisq.test",
HypT ~ "chisq.test",
TotChol ~ "t.test",
Testosterone ~ "t.test",
RegularMarij ~ "chisq.test",
Weight ~ "t.test",
Height ~ "t.test"),
test.args = all_tests("t.test") ~ list(var.equal = TRUE),## Important argument!
pvalue_fun = function(x) style_pvalue(x, digits = 2)) %>%
bold_p(t = 0.05) %>%
bold_labels
nhM[,c("Age","Gender","Race1","Depressed","Diabetes","TotChol", "Testosterone", "RegularMarij", "Weight", "Height", "HypT", "Incomplete")] %>%
tbl_summary(by = Incomplete,
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"),
) %>%
add_n %>%
add_p(test = list(Age ~ "t.test",
Race1 ~ "chisq.test",
Depressed ~ "chisq.test",
Diabetes ~ "chisq.test",
HypT ~ "chisq.test",
TotChol ~ "t.test",
Testosterone ~ "t.test",
RegularMarij ~ "chisq.test",
Weight ~ "t.test",
Height ~ "t.test"),
test.args = all_tests("t.test") ~ list(var.equal = TRUE),## Important argument!
pvalue_fun = function(x) style_pvalue(x, digits = 2)) %>%
bold_p(t = 0.05)
nh2 = drop_na(nh1) #complete data set
#Compare Y to continuous X
scatmatrixData = nh2[,c("Testosterone", "TotChol", "Age", "Height", "Weight")]
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(scatmatrixData, pch = 19, diag.panel=panel.hist)
cormat = cor(scatmatrixData)
pres <- cor.mtest(scatmatrixData, conf.level = .95)
corrplot.mixed(cormat, lower.col = "black", number.cex = 1,p.mat = pres$p, sig.level = .05)
nh2$Weightc = (nh2$Weight-mean(nh2$Weight, na.rm = TRUE))/sd(nh2$Weight, na.rm = TRUE)
nh2$Heightc = (nh2$Height-mean(nh2$Height, na.rm = TRUE))/sd(nh2$Height, na.rm = TRUE)
nh2$Agec = (nh2$Age-mean(nh2$Age, na.rm = TRUE))/sd(nh2$Age, na.rm = TRUE)
nh2$TotCholc = (nh2$TotChol-mean(nh2$TotChol, na.rm = TRUE))/sd(nh2$TotChol, na.rm = TRUE)
checka <- function (model) {
car::avPlots(model)
plot(model$fitted.values, rstudent(model))
hist(rstudent(model))
car::qqPlot(rstudent(model))
shapiro.test(rstudent(model)
) ##Should we include shapiro wilk????
}
m_unrefined <- lm(Testosterone~RegMarij, data=nh2)
summary(m_unrefined)
checka(m_unrefined) ##Comment on plots
m_adjusted_nolog =  lm(Testosterone~ RegMarij + Sex + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc,
data = nh2)
summary(m_adjusted_nolog)
checka(m_adjusted_nolog) ##Constant variance. We think the two clusters are due to sex. Also trend within a cluster.
m_adjust <- lm(log(Testosterone)~ RegMarij + Sex + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc, data = nh2)
summary(m_adjust)
checka(m_adjust)
nhFemale = nh2[ which(nh2$Sex == 1), ]
nhMale = nh2[ which(nh2$Sex == 0), ]
m_F = lm(log(Testosterone)~ RegMarij + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc,
data = nhFemale)
summary(m_F)
plot(m_F$fitted.values, m_F$residuals)
m_M = lm(log(Testosterone)~ RegMarij + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc,
data = nhMale)
summary(m_M)
plot(m_F$fitted.values, m_F$residuals)
car::vif(m_adjusted_nolog)
m_int <- lm(lm(log(Testosterone)~ RegMarij + Sex + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc + Sex*(RegMarij + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc),  data = nh2))
summary(m_int)
m_final <- lm(lm(log(Testosterone)~ RegMarij + Sex + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc + Sex*(Agec + Race1  + RegMarij +  Weightc + Heightc +
Diabete + TotCholc),  data = nh2))
summary(m_final)
plot(m_final$fitted.values, m_final$residuals)
hist(m_final$residuals)
car::qqPlot(m_final$residuals)
shapiro.test(m_final$residuals)
olsrr::ols_plot_dffits(m_final)
olsrr::ols_plot_dfbetas(m_final)
olsrr::ols_plot_cooksd_chart(m_final)
m_alt_cov = covratio(m_final)
n = nrow(nh2)
p = m_final$rank
plot(m_alt_cov); abline(1+3*p/n,0); abline(1-3*p/n,0)
m_wo_its =  lm(log(Testosterone)~ -1 + RegMarij + Sex + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc, data = nh2)
summary(m_wo_its)
#Test if all five are same
Contrast.T = matrix(c(0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0),byrow = T, nrow = 4)
car::linearHypothesis(model=m_wo_its,hypothesis.matrix=Contrast.T, rsh=c(0,0,0,0))
#Test if (4) are same
Contrast.T = matrix(c(0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0),byrow = T, nrow = 3)
car::linearHypothesis(model=m_wo_its,hypothesis.matrix=Contrast.T, rsh=c(0,0,0))
summary(nh2$Testosterone)
hist(nh2$Testosterone)
summary(nh2$Testosterone)
hist(nh2$Testosterone)
hist(log(nh2$Testosterone))
summary(nh2$Testosterone)
hist(nh2$Testosterone)
hist(log(nh2$Testosterone), main = "Histogram of log(Testosterone)",
xlab = "log(Testosterone) (log(ng/dL))")
?histogram
summary(nh2$Testosterone)
hist(nh2$Testosterone)
hist(log(nh2$Testosterone), main = "Histogram of log(Testosterone)",
xlab = "log(Testosterone) (log(ng/dL))", col = "grey")
md = lm(formula = log(Testosterone) ~ RegMarij + Sex + Agec + Race1 +
Depress + Weightc + Heightc + Diabete + HypT + TotCholc,
data = nh2)
md$col = ifelse(nh2$Sex == 1, 'red', 'blue')
plot(md$fitted.values, rstudent(md), col = md$col,
main = "Equal Variance Plot for main effect model (with log transform)")
legend("topright", legend = c("female", "male"), col = c('red','blue'),
pch = 1)
?rstudent
md = lm(formula = log(Testosterone) ~ RegMarij + Sex + Agec + Race1 +
Depress + Weightc + Heightc + Diabete + HypT + TotCholc,
data = nh2)
md$col = ifelse(nh2$Sex == 1, 'red', 'blue')
plot(md$fitted.values, rstudent(md), col = md$col,
main = "Equal Variance Plot for main effect model (with log transform)",
xlab = "Fitted Values", ylab = "Studentized Residuals")
legend("topright", legend = c("female", "male"), col = c('red','blue'),
pch = 1)
m_final <- lm(lm(log(Testosterone)~ RegMarij + Sex + Agec + Race1  + Depress + Weightc + Heightc +
Diabete + HypT + TotCholc + Sex*(Agec + Race1  + RegMarij +  Weightc + Heightc +
Diabete + TotCholc),  data = nh2))
summary(m_final)
plot(m_final$fitted.values, m_final$residuals)
hist(m_final$residuals)
car::qqPlot(m_final$residuals, main = "QQ plot", xlab = "Normal Quantiles",
ylab = "Residuals")
shapiro.test(m_final$residuals)
?ols_plot_dfbetas
library(kableExtra)
?summ
install.packages("jtools")
library(jtools)
summ(m_fin)
summ(m_final)
?read.csv
data = read.csv("data/waterfall.csv")
setwd("~/Documents/GitHub/waterfallDMD")
# waterfall preliminary analysis
setwd("~/Documents/GitHub/waterfallDMD")
data = read.csv("data/waterfall.csv")
# waterfall preliminary analysis
setwd("~/Documents/GitHub/waterfallDMD")
data.sm = read.csv("data/waterfall_sm.csv")
gc()
data.sm = read.csv("data/waterfall_sm.csv")
gc()
library(data.table)
# Reading and checking data
data.sm = fread("data/waterfall_sm.csv.gz")
View(data.sm)
dim(data.sm)
124815/246
530/4
265 *471
